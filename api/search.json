[{"id":"e2c1828d495adba74e80ee71a894f24e","title":"长列表低延迟组件","content":"##文档\n项目doc文档\n##github\nhttps://github.com/LJF12/VueShowcaseBox\n","slug":"长列表低延迟组件","date":"2024-08-26T00:51:24.000Z","categories_index":"","tags_index":"","author_index":"Frank Lei"},{"id":"62ec11e469e740d85f79456dd1d7dda5","title":"python集成flask、gunicorn、nacos以及pyinstaller打包部署文档","content":"\n集成flask框架\n依赖下载1234pip3 install flask #Flask Web 应用程序的核心框架。pip3 install Flask-MySQL #Flask 的 MySQL 数据库扩展pip3 install Flask-Script #用于将命令行脚本添加到 Flask 应用程序中的扩展pip3 install flask-sqlalchemy #SQLAlchemy数据库工具包\nflask框架集成程序入口（main.py）添加flask依赖，并注册flask框架\n\n\n\n123456from flask import Flaskapp = Flask(__name__) # flask框架注册if __name__ == &#x27;__main__&#x27;:    app.run()\ntxt3. Flask Mysql集成配置flask的数据库连接配置“SQLALCHEMY_DATABASE_URI”，入参为字符串\n12345678from flask import Flaskfrom DataBase.database import DATABASE_URIapp = Flask(__name__) # flask框架注册app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = DATABASE_URI  # 数据库链接if __name__ == &#x27;__main__&#x27;:    app.run()\n配置数据库连接DATABASE_URI 的内容,\n123456789DATABASE = &#123;    &#x27;host&#x27;: &#x27;127.0.0.1&#x27;,# 数据库服务器地址    &#x27;port&#x27;: 3306,  # 默认端口号    &#x27;user&#x27;: &#x27;xxxxx&#x27;,  # 登录用户名    &#x27;password&#x27;: &#x27;xxxxx&#x27;, # 登录密码    &#x27;database&#x27;: &#x27;dataBaseName&#x27; # 数据库名称&#125;DATABASE_URI = f&#x27;mysql+pymysql://&#123;DATABASE[&quot;user&quot;]&#125;:&#123;DATABASE[&quot;password&quot;]&#125;@&#123;DATABASE[&quot;host&quot;]&#125;:&#123;DATABASE[&quot;port&quot;]&#125;/&#123;DATABASE[&quot;database&quot;]&#125;&#x27;\n声明 SQLAlchemy 实例，为后续使用SQLAlchemy 工具库函数铺垫\n1234567891011from flask import Flaskfrom DataBase.database import DATABASE_URIfrom flask_sqlalchemy import SQLAlchemyapp = Flask(__name__) # flask框架注册app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = DATABASE_URI  # 数据库链接db = SQLAlchemy()db.init_app(app) if __name__ == &#x27;__main__&#x27;:    app.run()\ntxt4. 路由声明、注册使用flask的Blueprint（蓝图）来声明路由\n123456789101112131415from flask import request, jsonify, Blueprint#声明一个蓝图，并声明蓝图的name标识tenate = Blueprint(&#x27;my_blueprint&#x27;, __name__)#声明路由 定义请求方式@tenate.route(&#x27;/queryuser&#x27;, methods=[&#x27;POST&#x27;])def queryuser():    data = request.json    id = data.get(&#x27;id&#x27;)    return jsonify(&#123;&#x27;message&#x27;: &#x27;key found&#x27;, &#x27;data&#x27;: &#x27;success&#x27;&#125;), 200  @tenate.route(&#x27;/execute/&lt;id&gt;&#x27;, methods=[&#x27;GET&#x27;])def execute(id):    return &quot;helloworld&quot;;\n在应用程序入口注册路由\n12345678910111213from flask import Flaskfrom DataBase.database import DATABASE_URIfrom flask_sqlalchemy import SQLAlchemyfrom myApi import tenate #引入路由蓝图app = Flask(__name__) app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = DATABASE_URI  db = SQLAlchemy()app.register_blueprint(tenate) # 注册路由db.init_app(app) if __name__ == &#x27;__main__&#x27;:    app.run()\ntxt5. 使用flask查询数据库表首先定义数据模型\n123456from datetime import datetimefrom main import db #引入的SQLAlchemy实例class myTable(db.Model):    id = db.Column(db.Integer, primary_key=True)    name = db.Column(db.String(45), nullable=True)\n有两种操作方式：（这里举了个最简单的例子）一、通过数据模型操作\n123456from MyTable import myTable #刚刚声明的数据模型def queryuser():    id = &#x27;1&#x27;;    newData = myTable .query.get(id) #通过数据模型查询id为1的数据    return newData;\n二、通过sql操作\n1234567from main import db  #引入SQLAlchemy实例from sqlalchemy import textder queryuser()    sql = text(&#x27;select id, name from tablename where id = :id&#x27;)    executeData = db.session.execute(sql,params=&#123;&#x27;id&#x27;: id&#125;).fetchone()    return executeData;\n\n集成gunicorn服务器   默认启动flask项目是不推荐直接使用默认的web服务器的，需要通过gunicorn来作为http服务器来进行管理\n\n依赖下载\n\n\n\n1pip3 install gunicorn #注意要用python3环境下载，低版本与flask不兼容\ntxt2. gunicorn集成程序入口（main.py）添加gunicorn依赖，并注册，代替flask启动入口\n123456789101112131415161718192021222324252627282930313233343536373839from flask import Flaskfrom gunicorn.config import Configfrom DataBase.database import DATABASE_URIfrom flask_sqlalchemy import SQLAlchemyfrom myApi import tenate #引入路由蓝图app = Flask(__name__) app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = DATABASE_URI  app.register_blueprint(tenate) db.init_app(app) class MyApplication(Application):    #初始化方法    def __init__(self, app, cmd_options=None):         #更新服务配置        self.options = self.load_config()        #app程序交给gunicorn管理        self.application = app        super().__init__(self.options, cmd_options)    # 定义服务配置    def load_config(self):        config_obj = Config()        config_obj.set(&quot;bind&quot;, &quot;0.0.0.0:8000&quot;) #ip，端口        config_obj.set(&quot;workers&quot;, 4) #启动四个进程，高并发        config_obj.set(&quot;worker_class&quot;, &quot;sync&quot;) #同步工作进程，每个工作进程将一次处理一个请求。        config_obj.set(&quot;loglevel&quot;, &quot;debug&quot;) #Gunicorn 日志记录的详细程度        config_obj.set(&quot;accesslog&quot;, &quot;./logs/accesslog.log&quot;) #访问日志记录        config_obj.set(&quot;errorlog&quot;, &quot;./logs/errorlog.log&quot;) #错误日志记录        config_obj.set(&quot;forwarded_allow_ips&quot;, &quot;*&quot;) #允许接受通过代理服务器转发的请求的 IP 地址        config_obj.set(&quot;reload&quot;, True) #修改代码立即重启服务        return config_objif __name__ == &#x27;__main__&#x27;:    #app.run()    MyApplication(app).run()\n\n集成nacos\n依赖下载1pip3 install nacos-sdk-python\nnacos集成，注册服务程序入口（main.py）添加nacos依赖，并声明连接nacos配置以及注册服务\n\n\n\n12nacos_client = nacos.NacosClient(server_addresses=&#x27;xxx.xxx.xxx.xxx:8848&#x27;, namespace=&#x27;sass&#x27;,username=&#x27;nacos&#x27;, password=&#x27;nacos&#x27;)nacos_client.add_naming_instance(&#x27;leijunfeng&#x27;,  &#x27;127.0.0.1&#x27;, 8000)\n\n打包部署采用pyinstaller来打包程序。进入项目根路径进行打包。\n\n依赖下载\n\n\n\n1pip3 install pyinstaller\ntxt2. 使用venv创建独立运行环境1python3 -m venv myenv # ’myenv‘为环境名称\ntxt3. 打出项目依赖1pip3 freeze &gt; requirements.txt #将项目所有用到的依赖归类在requirements.txt中\ntxt4.  进入创建的独立运行环境1source myenv/bin/activate  #myenv 是刚才创建好的路径，注意要全路径,后面的bin和activate是创建环境后就创建好的\ntxt5. 下载项目依赖到运行环境中1pip3 install -r requirements.txt\ntxt6. 打包\\运行项目1234567# -F 项目启动主程序  --name 打包文件名  --hidden 不引入gunicorn的import gunicorn.glogging模块和gunicorn.workers.sync模块 # pyinstaller 用于将 Python 脚本和依赖项打包成可执行文件，而 Gunicorn 通常是一个独立的服务器，用于在生产环境中运行 Flask 项目。因此，不需要将 Gunicorn 的模块包含在可执行文件中。pyinstaller -F main.py --name gun  --hidden-import gunicorn.glogging --hidden-import gunicorn.workers.sync#执行命令后会生成 dist文件夹在项目的根路径，dist文件夹下会有刚才生成的gun的启动程序，运行即可./gun\n\n\n","slug":"falsk","date":"2024-01-31T07:33:17.000Z","categories_index":"","tags_index":"","author_index":"Frank Lei"},{"id":"f2bb811462223232905ce203d5a372bb","title":"问题记录-fegin接口调用参数有特殊符号反序列化失败导致接口400相应","content":"问题记录-fegin接口调用参数有特殊符号反序列化失败导致接口400相应\nFeign通常使用HTTP协议进行远程调用，因此在传输数据时需要进行序列化和反序列化。在Feign接口中，参数和返回类型需要被正确序列化为HTTP请求和响应的格式。\n在Feign接口参数中包含特殊字符可能导致调用接口时出现400错误的原因通常是因为特殊字符没有被正确编码。特殊字符在URL中需要进行编码，以便服务器能够正确解析它们。尝试使用URLEncoder类、Base64类对参数进行编码\n","slug":"问题记录-fegin接口调用参数有特殊符号反序列化失败导致接口400相应","date":"2023-11-28T00:56:11.000Z","categories_index":"","tags_index":"","author_index":"Frank Lei"},{"id":"d09c2e9e874afde71bf8573558487871","title":"Gmssl国密加密-JAVA集成","content":"SM加密使用GMSSL集成如何安装GMSSL库以及如何编译GMSSL-JAVA包，集成以及JAVA开发一、前置条件windows系统安装  \nCmake:https://cmake.org/download/mingW:https://www.mingw-w64.org/downloads/\n\nMac系统安装  \nCmake:https://cmake.org/download/GCC  \n\nGMSSL 3.1.1（https://github.com/guanzhi/GmSSL/releases）GMSSL-JAVA（https://github.com/GmSSL/GmSSL-Java）  \n二、安装Cmake安装包安装 然后环境变量path 引入安装目录到bin文件夹输入命令验证cmake是否安装成功  \n三、安装mingw(windows)解压包解压 然后环境变量path 引入安装目录到bin文件夹输入命令验证mingw是否安装成功mingw里面带的有gcc，查看验证是否安装成功\n四、安装GCC(Mac)得调研一下，不太清除mac怎么装  \n五、安装GMSS安装包安装 然后环境变量path 引入安装目录（Mac同理）输入gmssl version验证是否安装成功  \n六、编译GMSS-JAVA(windows)进入项目根目录，创建文件夹build进入build输入命令：    \n12cmake -G &quot;MinGW Makefiles&quot; ..mingw32-make\n获取到jar包以及libgmssljni\n七、编译GMSS-JAVA（Mac）进入项目根目录，创建文件夹build\n进入build输入命令：\n12cmake ..make\n获取到jar包以及libgmssljni(mac获取到的应该是..dylib后缀的库)\n八、Centos安装GMSSL&amp;GMSSL-JAVA还是安装好前置条件cmakemakegccyum install cmakeyum install makeyum install gcc验证安装是否成功\n1cmake --version、make --version、gcc --version\n下载源码上传至服务器安装GMSSL进入GMSSL根目录创建build文件夹并进入build文件夹\n12mkdir buildcd build\n执行命令构建系统所需的 Makefile 或其他构建文件\n1cmake ..\n执行命令编译\n12makemake test\n安装GMSSL\n1sudo make install\n验证是否安装成功\n1gmssl -version\n编译GMSSL-JAVA进入GMSSL根目录创建build文件夹并进入build文件夹  \n12mkdir buildcd build\n执行命令构建系统所需的 Makefile 或其他构建文件  \n1cmake ..\n执行命令编译\n12makemake test\n获得jar包和so库\n","slug":"Gmssl国密加密-JAVA集成","date":"2023-11-13T06:34:45.000Z","categories_index":"","tags_index":"","author_index":"Frank Lei"},{"id":"023ebc623e8a95d05a2f04c1b4ad62d5","title":"接口调度模拟开发","content":"##文档\n项目doc文档\n##github\nhttps://github.com/LJF12/LFCX-API-Manager\n","slug":"接口调度模拟开发","date":"2023-07-13T05:50:56.000Z","categories_index":"","tags_index":"VUE","author_index":"Frank Lei"},{"id":"8efdfe4872c447599d42e0a8f10aa3e3","title":"Hexo搭建博客","content":"Hexo搭建博客环境需要gitHubnode\n","slug":"Hexo搭建博客","date":"2021-12-31T17:13:40.000Z","categories_index":"","tags_index":"hexo","author_index":"Frank Lei"}]