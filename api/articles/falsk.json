{"title":"python集成flask、gunicorn、nacos以及pyinstaller打包部署文档","uid":"62ec11e469e740d85f79456dd1d7dda5","slug":"falsk","date":"2024-01-31T07:33:17.000Z","updated":"2024-01-31T07:34:29.922Z","comments":true,"path":"api/articles/falsk.json","keywords":null,"cover":null,"content":"<ol>\n<li>集成flask框架<ol>\n<li>依赖下载<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install flask #Flask Web 应用程序的核心框架。</span><br><span class=\"line\">pip3 install Flask-MySQL #Flask 的 MySQL 数据库扩展</span><br><span class=\"line\">pip3 install Flask-Script #用于将命令行脚本添加到 Flask 应用程序中的扩展</span><br><span class=\"line\">pip3 install flask-sqlalchemy #SQLAlchemy数据库工具包</span><br></pre></td></tr></table></figure></li>\n<li>flask框架集成<br>程序入口（main.py）添加flask依赖，并注册flask框架</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__) <span class=\"comment\"># flask框架注册</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">3. Flask Mysql集成</span></span></code></pre></div><p>配置flask的数据库连接配置“SQLALCHEMY_DATABASE_URI”，入参为字符串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> DataBase.database <span class=\"keyword\">import</span> DATABASE_URI</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__) <span class=\"comment\"># flask框架注册</span></span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DATABASE_URI  <span class=\"comment\"># 数据库链接</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p>配置数据库连接DATABASE_URI 的内容,</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASE = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,<span class=\"comment\"># 数据库服务器地址</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;port&#x27;</span>: <span class=\"number\">3306</span>,  <span class=\"comment\"># 默认端口号</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;user&#x27;</span>: <span class=\"string\">&#x27;xxxxx&#x27;</span>,  <span class=\"comment\"># 登录用户名</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;password&#x27;</span>: <span class=\"string\">&#x27;xxxxx&#x27;</span>, <span class=\"comment\"># 登录密码</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;database&#x27;</span>: <span class=\"string\">&#x27;dataBaseName&#x27;</span> <span class=\"comment\"># 数据库名称</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">DATABASE_URI = <span class=\"string\">f&#x27;mysql+pymysql://<span class=\"subst\">&#123;DATABASE[<span class=\"string\">&quot;user&quot;</span>]&#125;</span>:<span class=\"subst\">&#123;DATABASE[<span class=\"string\">&quot;password&quot;</span>]&#125;</span>@<span class=\"subst\">&#123;DATABASE[<span class=\"string\">&quot;host&quot;</span>]&#125;</span>:<span class=\"subst\">&#123;DATABASE[<span class=\"string\">&quot;port&quot;</span>]&#125;</span>/<span class=\"subst\">&#123;DATABASE[<span class=\"string\">&quot;database&quot;</span>]&#125;</span>&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>声明 SQLAlchemy 实例，为后续使用SQLAlchemy 工具库函数铺垫</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> DataBase.database <span class=\"keyword\">import</span> DATABASE_URI</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__) <span class=\"comment\"># flask框架注册</span></span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DATABASE_URI  <span class=\"comment\"># 数据库链接</span></span><br><span class=\"line\">db = SQLAlchemy()</span><br><span class=\"line\">db.init_app(app) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">4. 路由声明、注册</span></span></code></pre></div><p>使用flask的Blueprint（蓝图）来声明路由</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request, jsonify, Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#声明一个蓝图，并声明蓝图的name标识</span></span><br><span class=\"line\">tenate = Blueprint(<span class=\"string\">&#x27;my_blueprint&#x27;</span>, __name__)</span><br><span class=\"line\"><span class=\"comment\">#声明路由 定义请求方式</span></span><br><span class=\"line\"><span class=\"meta\">@tenate.route(<span class=\"params\"><span class=\"string\">&#x27;/queryuser&#x27;</span>, methods=[<span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">queryuser</span>():</span><br><span class=\"line\">    data = request.json</span><br><span class=\"line\">    <span class=\"built_in\">id</span> = data.get(<span class=\"string\">&#x27;id&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(&#123;<span class=\"string\">&#x27;message&#x27;</span>: <span class=\"string\">&#x27;key found&#x27;</span>, <span class=\"string\">&#x27;data&#x27;</span>: <span class=\"string\">&#x27;success&#x27;</span>&#125;), <span class=\"number\">200</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@tenate.route(<span class=\"params\"><span class=\"string\">&#x27;/execute/&lt;id&gt;&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">execute</span>(<span class=\"params\"><span class=\"built_in\">id</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;helloworld&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在应用程序入口注册路由</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> DataBase.database <span class=\"keyword\">import</span> DATABASE_URI</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"><span class=\"keyword\">from</span> myApi <span class=\"keyword\">import</span> tenate <span class=\"comment\">#引入路由蓝图</span></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__) </span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DATABASE_URI  </span><br><span class=\"line\">db = SQLAlchemy()</span><br><span class=\"line\">app.register_blueprint(tenate) <span class=\"comment\"># 注册路由</span></span><br><span class=\"line\">db.init_app(app) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">5. 使用flask查询数据库表</span></span></code></pre></div><p>首先定义数据模型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> main <span class=\"keyword\">import</span> db <span class=\"comment\">#引入的SQLAlchemy实例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">myTable</span>(db.Model):</span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">45</span>), nullable=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>有两种操作方式：（这里举了个最简单的例子）<br>一、通过数据模型操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> MyTable <span class=\"keyword\">import</span> myTable <span class=\"comment\">#刚刚声明的数据模型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">queryuser</span>():</span><br><span class=\"line\">    <span class=\"built_in\">id</span> = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">    newData = myTable .query.get(<span class=\"built_in\">id</span>) <span class=\"comment\">#通过数据模型查询id为1的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newData;</span><br></pre></td></tr></table></figure>\n<p>二、通过sql操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> main <span class=\"keyword\">import</span> db  <span class=\"comment\">#引入SQLAlchemy实例</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> text</span><br><span class=\"line\"></span><br><span class=\"line\">der queryuser()</span><br><span class=\"line\">    sql = text(<span class=\"string\">&#x27;select id, name from tablename where id = :id&#x27;</span>)</span><br><span class=\"line\">    executeData = db.session.execute(sql,params=&#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"built_in\">id</span>&#125;).fetchone()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> executeData;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>集成gunicorn服务器<br>   默认启动flask项目是不推荐直接使用默认的web服务器的，需要通过gunicorn来作为http服务器来进行管理</p>\n<ol>\n<li>依赖下载</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install gunicorn <span class=\"comment\">#注意要用python3环境下载，低版本与flask不兼容</span></span><br></pre></td></tr></table></figure>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">2. gunicorn集成</span></span></code></pre></div><p>程序入口（main.py）添加gunicorn依赖，并注册，代替flask启动入口</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> gunicorn.config <span class=\"keyword\">import</span> Config</span><br><span class=\"line\"><span class=\"keyword\">from</span> DataBase.database <span class=\"keyword\">import</span> DATABASE_URI</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"><span class=\"keyword\">from</span> myApi <span class=\"keyword\">import</span> tenate <span class=\"comment\">#引入路由蓝图</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__) </span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DATABASE_URI  </span><br><span class=\"line\">app.register_blueprint(tenate) </span><br><span class=\"line\">db.init_app(app) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyApplication</span>(<span class=\"title class_ inherited__\">Application</span>):</span><br><span class=\"line\">    <span class=\"comment\">#初始化方法</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, app, cmd_options=<span class=\"literal\">None</span></span>): </span><br><span class=\"line\">        <span class=\"comment\">#更新服务配置</span></span><br><span class=\"line\">        self.options = self.load_config()</span><br><span class=\"line\">        <span class=\"comment\">#app程序交给gunicorn管理</span></span><br><span class=\"line\">        self.application = app</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(self.options, cmd_options)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定义服务配置</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_config</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        config_obj = Config()</span><br><span class=\"line\">        config_obj.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;bind&quot;</span>, <span class=\"string\">&quot;0.0.0.0:8000&quot;</span>) <span class=\"comment\">#ip，端口</span></span><br><span class=\"line\">        config_obj.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;workers&quot;</span>, <span class=\"number\">4</span>) <span class=\"comment\">#启动四个进程，高并发</span></span><br><span class=\"line\">        config_obj.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;worker_class&quot;</span>, <span class=\"string\">&quot;sync&quot;</span>) <span class=\"comment\">#同步工作进程，每个工作进程将一次处理一个请求。</span></span><br><span class=\"line\">        config_obj.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;loglevel&quot;</span>, <span class=\"string\">&quot;debug&quot;</span>) <span class=\"comment\">#Gunicorn 日志记录的详细程度</span></span><br><span class=\"line\">        config_obj.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;accesslog&quot;</span>, <span class=\"string\">&quot;./logs/accesslog.log&quot;</span>) <span class=\"comment\">#访问日志记录</span></span><br><span class=\"line\">        config_obj.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;errorlog&quot;</span>, <span class=\"string\">&quot;./logs/errorlog.log&quot;</span>) <span class=\"comment\">#错误日志记录</span></span><br><span class=\"line\">        config_obj.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;forwarded_allow_ips&quot;</span>, <span class=\"string\">&quot;*&quot;</span>) <span class=\"comment\">#允许接受通过代理服务器转发的请求的 IP 地址</span></span><br><span class=\"line\">        config_obj.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;reload&quot;</span>, <span class=\"literal\">True</span>) <span class=\"comment\">#修改代码立即重启服务</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> config_obj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\">#app.run()</span></span><br><span class=\"line\">    MyApplication(app).run()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>集成nacos<ol>\n<li>依赖下载<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install nacos-sdk-python</span><br></pre></td></tr></table></figure></li>\n<li>nacos集成，注册服务<br>程序入口（main.py）添加nacos依赖，并声明连接nacos配置以及注册服务</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nacos_client = nacos.NacosClient(server_addresses=<span class=\"string\">&#x27;xxx.xxx.xxx.xxx:8848&#x27;</span>, namespace=<span class=\"string\">&#x27;sass&#x27;</span>,username=<span class=\"string\">&#x27;nacos&#x27;</span>, password=<span class=\"string\">&#x27;nacos&#x27;</span>)</span><br><span class=\"line\">nacos_client.add_naming_instance(<span class=\"string\">&#x27;leijunfeng&#x27;</span>,  <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"number\">8000</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p>打包部署<br>采用pyinstaller来打包程序。进入项目根路径进行打包。</p>\n<ol>\n<li>依赖下载</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install pyinstaller</span><br></pre></td></tr></table></figure>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">2. 使用venv创建独立运行环境</span></span></code></pre></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv myenv # ’myenv‘为环境名称</span><br></pre></td></tr></table></figure>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">3. 打出项目依赖</span></span></code></pre></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 freeze &gt; requirements.txt #将项目所有用到的依赖归类在requirements.txt中</span><br></pre></td></tr></table></figure>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">4.  进入创建的独立运行环境</span></span></code></pre></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source myenv/bin/activate  #myenv 是刚才创建好的路径，注意要全路径,后面的bin和activate是创建环境后就创建好的</span><br></pre></td></tr></table></figure>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">5. 下载项目依赖到运行环境中</span></span></code></pre></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">6. 打包\\运行项目</span></span></code></pre></div><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-F 项目启动主程序  --name 打包文件名  --hidden 不引入gunicorn的import gunicorn.glogging模块和gunicorn.workers.sync模块</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">pyinstaller 用于将 Python 脚本和依赖项打包成可执行文件，而 Gunicorn 通常是一个独立的服务器，用于在生产环境中运行 Flask 项目。因此，不需要将 Gunicorn 的模块包含在可执行文件中。</span></span><br><span class=\"line\">pyinstaller -F main.py --name gun  --hidden-import gunicorn.glogging --hidden-import gunicorn.workers.sync</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">执行命令后会生成 dist文件夹在项目的根路径，dist文件夹下会有刚才生成的gun的启动程序，运行即可</span></span><br><span class=\"line\">./gun</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","feature":true,"text":" 集成flask框架 依赖下载1234pip3 install flask #Flask Web 应用程序的核心框架。pip3 install Flask-My...","permalink":"/post/falsk","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"Frank Lei","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"我是一个普通的小职员","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"问题记录-fegin接口调用参数有特殊符号反序列化失败导致接口400相应","uid":"f2bb811462223232905ce203d5a372bb","slug":"问题记录-fegin接口调用参数有特殊符号反序列化失败导致接口400相应","date":"2023-11-28T00:56:11.000Z","updated":"2024-01-02T01:00:56.916Z","comments":true,"path":"api/articles/问题记录-fegin接口调用参数有特殊符号反序列化失败导致接口400相应.json","keywords":null,"cover":null,"text":"问题记录-fegin接口调用参数有特殊符号反序列化失败导致接口400相应 Feign通常使用HTTP协议进行远程调用，因此在传输数据时需要进行序列化和反序列化。...","permalink":"/post/问题记录-fegin接口调用参数有特殊符号反序列化失败导致接口400相应","photos":[],"count_time":{"symbolsCount":234,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Frank Lei","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"我是一个普通的小职员","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}